import React, { useEffect, useState } from "react";
import axios from "../../utils/api";
import "./TodayLog.css";

const TodayLog = ({ id, hide }) => {
  const [log, setLog] = useState(null);
  const [error, setError] = useState(null);
  const [updating, setUpdating] = useState(false);

  useEffect(() => {
    if (!id) {
      setError("Invalid employee ID.");
      return;
    }

    const fetchTodayLog = async () => {
      try {
        const response = await axios.get(`/todayEmployeeActivity/${id}/`);
        setLog(response.data);
      } catch (error) {
        console.error("Error fetching today's log:", error);
        setError("Failed to fetch today's log.");
      }
    };

    fetchTodayLog();
  }, [id]);

  const formatDateTime = (dateString) => {
    const options = {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  const handleUpdate = async () => {
    if (!log) {
      setError("No log available to update.");
      return;
    }
    
    // Debugging: Log the current log object and its id
    console.log("Log object:", log);
    console.log("Log ID:", log.id);
  
    if (!log.id) {
      setError("Log ID is missing. Cannot update log.");
      return;
    }
  
    setUpdating(true);
    try {
      const response = await axios.put(`/todayEmployeeActivity/${log.id}/`, {
        status: log.status,
        status_time: new Date().toISOString(),
        previous: log.status_time,
      });
  
      setLog(response.data); // Update log with the updated data
      setUpdating(false);
    } catch (error) {
      console.error("Error updating today's log:", error);
      setError("Failed to update today's log.");
      setUpdating(false);
    }
  };
  

  return (
    <div className="today-log-container">
      {log && (
        <h2>{`${log.first_name} ${log.last_name}`}</h2>
      )}
      <h2>Today's Attendance Log</h2>
      {error && <p className="error-message">{error}</p>}

      {log ? (
        <table className="employee-table">
          <thead>
            <tr>
              <th>Status</th>
              <th>Status Time</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>{log.status}</td>
              <td>{formatDateTime(log.status_time)}</td>
            </tr>
          </tbody>
        </table>
      ) : (
        <p>No log found for today.</p>
      )}

      <button onClick={handleUpdate} className="update-button" disabled={updating}>
        {updating ? "Updating..." : "Update Log"}
      </button>

      <button onClick={hide} className="back-button">
        Back to Employee List
      </button>
    </div>
  );
};

export default TodayLog;
